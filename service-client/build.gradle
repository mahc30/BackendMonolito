plugins {
	id 'org.springframework.boot' version '2.6.2'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'org.barfuin.gradle.jacocolog' version '2.0.0'
}

group = 'backendJava'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2021.0.0")
}

dependencies {
	//implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.6.3'
	implementation 'org.springframework.boot:spring-boot-starter-web:2.6.3'
	//implementation 'org.springframework.cloud:spring-cloud-starter-config'
	//implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	//implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
	compileOnly 'org.projectlombok:lombok:1.18.22'
	runtimeOnly 'com.h2database:h2:2.1.210'
	annotationProcessor 'org.projectlombok:lombok:1.18.22'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'
	testImplementation 'org.springframework.boot:spring-boot-starter-test:2.6.3'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb:2.6.3'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive:2.6.3'
	implementation 'mysql:mysql-connector-java:8.0.28'
	testImplementation 'io.projectreactor:reactor-test:3.4.14'
	implementation 'io.springfox:springfox-boot-starter:3.0.0'
	implementation 'io.springfox:springfox-swagger-ui:3.0.0'
	implementation 'org.springframework.boot:spring-boot-starter-validation:2.6.2'
	implementation 'com.amazonaws:aws-lambda-java-core:1.2.1'
	implementation 'org.springframework.cloud:spring-cloud-function-adapter-aws:3.2.1'
	implementation 'org.mapstruct:mapstruct:1.4.2.Final'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

test {
	useJUnitPlatform()
}

test {
	finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
	dependsOn test // tests are required to run before generating the report
}


task buildZip(type: Zip) {
	from compileJava
	from processResources
	into('lib') {
		from configurations.runtimeClasspath
	}
}